{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\nexport default function useCachedResources() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHideAsync();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread(_objectSpread({}, FontAwesome.font), {}, {\n                'space-mono': require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\n                framework7: require(\"../assets/fonts/Framework7Icons-Regular.ttf\"),\n                'material-icons': require(\"../assets/fonts/MaterialIcons-Regular.ttf\")\n              })));\n\n            case 4:\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 9:\n              _context.prev = 9;\n              setLoadingComplete(true);\n              SplashScreen.hideAsync();\n              return _context.finish(9);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6, 9, 13]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"names":["FontAwesome","Font","SplashScreen","useEffect","useState","useCachedResources","isLoadingComplete","setLoadingComplete","loadResourcesAndDataAsync","preventAutoHideAsync","loadAsync","font","require","framework7","console","warn","hideAsync"],"sources":["/Users/manivannanbabu/mabblesoft/workspace/expplora-app/hooks/useCachedResources.ts"],"sourcesContent":["import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n\tconst [isLoadingComplete, setLoadingComplete] = useState(false);\n\n\t// Load any resources or data that we need prior to rendering the app\n\tuseEffect(() => {\n\t\tasync function loadResourcesAndDataAsync() {\n\t\t\ttry {\n\t\t\t\tSplashScreen.preventAutoHideAsync();\n\n\t\t\t\t// Load fonts\n\t\t\t\tawait Font.loadAsync({\n\t\t\t\t\t...FontAwesome.font,\n\t\t\t\t\t'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n\t\t\t\t\tframework7: require('../assets/fonts/Framework7Icons-Regular.ttf'),\n\t\t\t\t\t'material-icons': require('../assets/fonts/MaterialIcons-Regular.ttf'),\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\t// We might want to provide this error information to an error reporting service\n\t\t\t\tconsole.warn(e);\n\t\t\t} finally {\n\t\t\t\tsetLoadingComplete(true);\n\t\t\t\tSplashScreen.hideAsync();\n\t\t\t}\n\t\t}\n\n\t\tloadResourcesAndDataAsync();\n\t}, []);\n\n\treturn isLoadingComplete;\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,kBAAT,GAA8B;EAC5C,gBAAgDD,QAAQ,CAAC,KAAD,CAAxD;EAAA;EAAA,IAAOE,iBAAP;EAAA,IAA0BC,kBAA1B;;EAGAJ,SAAS,CAAC,YAAM;IACf,SAAeK,yBAAf;MAAA;QAAA;UAAA;YAAA;cAAA;cAEEN,YAAY,CAACO,oBAAb;cAFF;cAAA,iCAKQR,IAAI,CAACS,SAAL,iCACFV,WAAW,CAACW,IADV;gBAEL,cAAcC,OAAO,yCAFhB;gBAGLC,UAAU,EAAED,OAAO,+CAHd;gBAIL,kBAAkBA,OAAO;cAJpB,GALR;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAaEE,OAAO,CAACC,IAAR;;YAbF;cAAA;cAeER,kBAAkB,CAAC,IAAD,CAAlB;cACAL,YAAY,CAACc,SAAb;cAhBF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAoBAR,yBAAyB;EACzB,CAtBQ,EAsBN,EAtBM,CAAT;EAwBA,OAAOF,iBAAP;AACA"},"metadata":{},"sourceType":"module"}