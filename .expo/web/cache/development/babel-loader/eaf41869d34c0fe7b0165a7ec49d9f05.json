{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _fontfaceobserver = _interopRequireDefault(require(\"fontfaceobserver\"));\n\nvar _Font = require(\"./Font.types\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction getFontFaceStyleSheet() {\n  if (!_expoModulesCore.Platform.isDOMAvailable) {\n    return null;\n  }\n\n  var styleSheet = getStyleElement();\n  return styleSheet.sheet ? styleSheet.sheet : null;\n}\n\nfunction getFontFaceRules() {\n  var sheet = getFontFaceStyleSheet();\n\n  if (sheet) {\n    var rules = (0, _toConsumableArray2.default)(sheet.cssRules);\n    var items = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({\n          rule: rule,\n          index: i\n        });\n      }\n    }\n\n    return items;\n  }\n\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(fontFamilyName, options) {\n  var rules = getFontFaceRules();\n  return rules.filter(function (_ref) {\n    var rule = _ref.rule;\n    return rule.style.fontFamily === fontFamilyName && (options && options.display ? options.display === rule.style.fontDisplay : true);\n  });\n}\n\nvar _default = {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n\n  unloadAllAsync: function () {\n    var _unloadAllAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {\n      var element;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (_expoModulesCore.Platform.isDOMAvailable) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              element = document.getElementById(ID);\n\n              if (element && element instanceof HTMLStyleElement) {\n                document.removeChild(element);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function unloadAllAsync() {\n      return _unloadAllAsync.apply(this, arguments);\n    }\n\n    return unloadAllAsync;\n  }(),\n  unloadAsync: function () {\n    var _unloadAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(fontFamilyName, options) {\n      var sheet, items, _iterator, _step, item;\n\n      return _regenerator.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              sheet = getFontFaceStyleSheet();\n\n              if (sheet) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n\n              for (_iterator = _createForOfIteratorHelperLoose(items); !(_step = _iterator()).done;) {\n                item = _step.value;\n                sheet.deleteRule(item.index);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function unloadAsync(_x, _x2) {\n      return _unloadAsync.apply(this, arguments);\n    }\n\n    return unloadAsync;\n  }(),\n  loadAsync: function () {\n    var _loadAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(fontFamilyName, resource) {\n      var canInjectStyle, style;\n      return _regenerator.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_expoModulesCore.Platform.isDOMAvailable) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n\n              if (canInjectStyle) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new _expoModulesCore.CodedError('ERR_WEB_ENVIRONMENT', \"The browser's `document.head` element doesn't support injecting fonts.\");\n\n            case 5:\n              style = _createWebStyle(fontFamilyName, resource);\n              document.head.appendChild(style);\n\n              if (isFontLoadingListenerSupported()) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 9:\n              return _context3.abrupt(\"return\", new _fontfaceobserver.default(fontFamilyName, {\n                display: resource.display\n              }).load());\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function loadAsync(_x3, _x4) {\n      return _loadAsync.apply(this, arguments);\n    }\n\n    return loadAsync;\n  }()\n};\nexports.default = _default;\nvar ID = 'expo-generated-fonts';\n\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = \"@font-face {\\n    font-family: \" + fontFamily + \";\\n    src: url(\" + resource.uri + \");\\n    font-display: \" + (resource.display || _Font.FontDisplay.AUTO) + \";\\n  }\";\n  var styleElement = getStyleElement();\n\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported() {\n  var userAgent = window.navigator.userAgent;\n  var isIOS = !!userAgent.match(/iPad|iPhone/i);\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  var isEdge = userAgent.includes('Edge');\n  var isIE = userAgent.includes('Trident');\n  var isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}","map":{"version":3,"sources":["../src/ExpoFontLoader.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, Platform } from 'expo-modules-core';\nimport FontObserver from 'fontfaceobserver';\n\nimport { UnloadFontOptions } from './Font';\nimport { FontDisplay, FontResource } from './Font.types';\n\nfunction getFontFaceStyleSheet(): CSSStyleSheet | null {\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n  const styleSheet = getStyleElement();\n  return styleSheet.sheet ? (styleSheet.sheet as CSSStyleSheet) : null;\n}\n\ntype RuleItem = { rule: CSSFontFaceRule; index: number };\n\nfunction getFontFaceRules(): RuleItem[] {\n  const sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    // @ts-ignore: rule iterator\n    const rules = [...sheet.cssRules];\n\n    const items: RuleItem[] = [];\n\n    for (let i = 0; i < rules.length; i++) {\n      const rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({ rule, index: i });\n      }\n    }\n    return items;\n  }\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(\n  fontFamilyName: string,\n  options?: UnloadFontOptions\n): RuleItem[] {\n  const rules = getFontFaceRules();\n  return rules.filter(({ rule }) => {\n    return (\n      rule.style.fontFamily === fontFamilyName &&\n      (options && options.display ? options.display === (rule.style as any).fontDisplay : true)\n    );\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async unloadAllAsync(): Promise<void> {\n    if (!Platform.isDOMAvailable) return;\n\n    const element = document.getElementById(ID);\n    if (element && element instanceof HTMLStyleElement) {\n      document.removeChild(element);\n    }\n  },\n\n  async unloadAsync(fontFamilyName: string, options?: UnloadFontOptions): Promise<void> {\n    const sheet = getFontFaceStyleSheet();\n    if (!sheet) return;\n    const items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n    for (const item of items) {\n      sheet.deleteRule(item.index);\n    }\n  },\n\n  async loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new CodedError(\n        'ERR_WEB_ENVIRONMENT',\n        `The browser's \\`document.head\\` element doesn't support injecting fonts.`\n      );\n    }\n\n    const style = _createWebStyle(fontFamilyName, resource);\n    document.head!.appendChild(style);\n\n    if (!isFontLoadingListenerSupported()) {\n      return;\n    }\n\n    return new FontObserver(fontFamilyName, { display: resource.display }).load();\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = `@font-face {\n    font-family: ${fontFamily};\n    src: url(${resource.uri});\n    font-display: ${resource.display || FontDisplay.AUTO};\n  }`;\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported(): boolean {\n  const { userAgent } = window.navigator;\n  // WebKit is broken https://github.com/bramstein/fontfaceobserver/issues/95\n  const isIOS = !!userAgent.match(/iPad|iPhone/i);\n  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  // Edge is broken https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n  const isEdge = userAgent.includes('Edge');\n  // Internet Explorer\n  const isIE = userAgent.includes('Trident');\n  // Firefox\n  const isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}