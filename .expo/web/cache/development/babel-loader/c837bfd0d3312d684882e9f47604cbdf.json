{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fontFamilyNeedsScoping = fontFamilyNeedsScoping;\nexports.getAssetForSource = getAssetForSource;\nexports.getNativeFontName = getNativeFontName;\nexports.loadSingleFontAsync = loadSingleFontAsync;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\n\nvar _Font = require(\"./Font\");\n\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if ((0, _typeof2.default)(asset) === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n\n  return null;\n}\n\nfunction displayFromFontSource(asset) {\n  return asset.display || _Font.FontDisplay.AUTO;\n}\n\nfunction fontFamilyNeedsScoping(name) {\n  return false;\n}\n\nfunction getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri,\n    display: display\n  };\n}\n\nfunction throwInvalidSourceError(source) {\n  var type = (0, _typeof2.default)(source);\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \".concat(type));\n}\n\nfunction loadSingleFontAsync(_x, _x2) {\n  return _loadSingleFontAsync.apply(this, arguments);\n}\n\nfunction _loadSingleFontAsync() {\n  _loadSingleFontAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(name, input) {\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if ((0, _typeof2.default)(input) !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n              throwInvalidSourceError(input);\n            }\n\n            _context.next = 3;\n            return _ExpoFontLoader.default.loadAsync(name, input);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadSingleFontAsync.apply(this, arguments);\n}\n\nfunction getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA;;AAEA;;AACA;;AAGA,SAAS,iBAAT,CAA2B,KAA3B,EAAqC;EACnC,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,KAAK,IAAI,IAAhB;EACD,CAFD,MAEO,IAAI,sBAAO,KAAP,MAAiB,QAArB,EAA+B;IACpC,OAAO,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,QAAnB,IAA+B,IAAtC;EACD;;EACD,OAAO,IAAP;AACD;;AAED,SAAS,qBAAT,CAA+B,KAA/B,EAAyC;EACvC,OAAO,KAAK,CAAC,OAAN,IAAiB,iBAAA,CAAY,IAApC;AACD;;AAEK,SAAU,sBAAV,CAAiC,IAAjC,EAA6C;EACjD,OAAO,KAAP;AACD;;AAEK,SAAU,iBAAV,CAA4B,MAA5B,EAA8C;EAClD,IAAM,GAAG,GAAG,iBAAiB,CAAC,MAAD,CAA7B;EACA,IAAM,OAAO,GAAG,qBAAqB,CAAC,MAAD,CAArC;;EAEA,IAAI,CAAC,GAAD,IAAQ,OAAO,GAAP,KAAe,QAA3B,EAAqC;IACnC,uBAAuB,CAAC,GAAD,CAAvB;EACD;;EAED,OAAO;IACL,GAAG,EAAE,GADA;IAEL,OAAO,EAAP;EAFK,CAAP;AAID;;AAED,SAAS,uBAAT,CAAiC,MAAjC,EAA4C;EAC1C,IAAI,IAAI,yBAAkB,MAAlB,CAAR;EACA,IAAI,IAAI,KAAK,QAAb,EAAuB,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;EACvB,MAAM,IAAI,2BAAJ,wIAE2G,IAF3G,EAAN;AAID;;SAEqB,mB;;;;;mFAAf,iBACL,IADK,EAEL,KAFK;IAAA;MAAA;QAAA;UAAA;YAIL,IAAI,sBAAO,KAAP,MAAiB,QAAjB,IAA6B,OAAO,KAAK,CAAC,GAAb,KAAqB,QAAlD,IAA+D,KAAa,CAAC,aAAjF,EAAgG;cAC9F,uBAAuB,CAAC,KAAD,CAAvB;YACD;;YANI;YAAA,OAQC,uBAAA,CAAe,SAAf,CAAyB,IAAzB,EAA+B,KAA/B,CARD;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAWD,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;EAC5C,OAAO,IAAP;AACD","sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}