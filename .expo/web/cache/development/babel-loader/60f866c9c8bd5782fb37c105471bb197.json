{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"FontDisplay\", {\n  enumerable: true,\n  get: function get() {\n    return _Font.FontDisplay;\n  }\n});\nexports.isLoaded = isLoaded;\nexports.isLoading = isLoading;\nexports.loadAsync = loadAsync;\nexports.processFontFamily = processFontFamily;\nexports.unloadAllAsync = unloadAllAsync;\nexports.unloadAsync = unloadAsync;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\n\nvar _Font = require(\"./Font.types\");\n\nvar _FontLoader = require(\"./FontLoader\");\n\nvar loaded = {};\nvar loadPromises = {};\n\nfunction processFontFamily(fontFamily) {\n  if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n\n    return 'System';\n  }\n\n  return \"ExpoFont-\" + (0, _FontLoader.getNativeFontName)(fontFamily);\n}\n\nfunction isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\n\nfunction isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\n\nfunction loadAsync(_x, _x2) {\n  return _loadAsync.apply(this, arguments);\n}\n\nfunction _loadAsync() {\n  _loadAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(fontFamilyOrFontMap, source) {\n    var fontMap, names;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof fontFamilyOrFontMap === 'object')) {\n              _context.next = 8;\n              break;\n            }\n\n            if (!source) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n\n          case 3:\n            fontMap = fontFamilyOrFontMap;\n            names = Object.keys(fontMap);\n            _context.next = 7;\n            return Promise.all(names.map(function (name) {\n              return loadFontInNamespaceAsync(name, fontMap[name]);\n            }));\n\n          case 7:\n            return _context.abrupt(\"return\");\n\n          case 8:\n            _context.next = 10;\n            return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadAsync.apply(this, arguments);\n}\n\nfunction loadFontInNamespaceAsync(_x3, _x4) {\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\n\nfunction _loadFontInNamespaceAsync() {\n  _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(fontFamily, source) {\n    var asset;\n    return _regenerator.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (source) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n\n          case 2:\n            if (!loaded[fontFamily]) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            if (!loadPromises.hasOwnProperty(fontFamily)) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n\n          case 6:\n            asset = (0, _FontLoader.getAssetForSource)(source);\n            loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {\n              return _regenerator.default.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.prev = 0;\n                      _context2.next = 3;\n                      return (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n\n                    case 3:\n                      loaded[fontFamily] = true;\n\n                    case 4:\n                      _context2.prev = 4;\n                      delete loadPromises[fontFamily];\n                      return _context2.finish(4);\n\n                    case 7:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2, null, [[0,, 4, 7]]);\n            }))();\n            _context3.next = 10;\n            return loadPromises[fontFamily];\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\n\nfunction unloadAllAsync() {\n  return _unloadAllAsync.apply(this, arguments);\n}\n\nfunction _unloadAllAsync() {\n  _unloadAllAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4() {\n    var _i, _Object$keys, fontFamily;\n\n    return _regenerator.default.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (_ExpoFontLoader.default.unloadAllAsync) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n\n          case 2:\n            if (!Object.keys(loadPromises).length) {\n              _context4.next = 4;\n              break;\n            }\n\n            throw new _expoModulesCore.CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n\n          case 4:\n            for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n              fontFamily = _Object$keys[_i];\n              delete loaded[fontFamily];\n            }\n\n            _context4.next = 7;\n            return _ExpoFontLoader.default.unloadAllAsync();\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _unloadAllAsync.apply(this, arguments);\n}\n\nfunction unloadAsync(_x5, _x6) {\n  return _unloadAsync.apply(this, arguments);\n}\n\nfunction _unloadAsync() {\n  _unloadAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(fontFamilyOrFontMap, options) {\n    var fontMap, names;\n    return _regenerator.default.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (_ExpoFontLoader.default.unloadAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n\n          case 2:\n            if (!(typeof fontFamilyOrFontMap === 'object')) {\n              _context5.next = 10;\n              break;\n            }\n\n            if (!options) {\n              _context5.next = 5;\n              break;\n            }\n\n            throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n\n          case 5:\n            fontMap = fontFamilyOrFontMap;\n            names = Object.keys(fontMap);\n            _context5.next = 9;\n            return Promise.all(names.map(function (name) {\n              return unloadFontInNamespaceAsync(name, fontMap[name]);\n            }));\n\n          case 9:\n            return _context5.abrupt(\"return\");\n\n          case 10:\n            _context5.next = 12;\n            return unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n\n          case 12:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _unloadAsync.apply(this, arguments);\n}\n\nfunction unloadFontInNamespaceAsync(_x7, _x8) {\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}\n\nfunction _unloadFontInNamespaceAsync() {\n  _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6(fontFamily, options) {\n    var nativeFontName;\n    return _regenerator.default.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (loaded[fontFamily]) {\n              _context6.next = 4;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 4:\n            delete loaded[fontFamily];\n\n          case 5:\n            nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n\n            if (nativeFontName) {\n              _context6.next = 8;\n              break;\n            }\n\n            throw new _expoModulesCore.CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n\n          case 8:\n            _context6.next = 10;\n            return _ExpoFontLoader.default.unloadAsync(nativeFontName, options);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Font.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/introduction/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}